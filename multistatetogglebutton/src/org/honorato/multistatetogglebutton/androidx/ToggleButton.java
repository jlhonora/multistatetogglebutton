package org.honorato.multistatetogglebutton.androidx;

import android.content.Context;
import androidx.annotation.ColorInt;
import androidx.annotation.ColorRes;
import androidx.annotation.DrawableRes;
import androidx.core.content.ContextCompat;
import android.util.AttributeSet;
import android.widget.LinearLayout;

public abstract class ToggleButton extends LinearLayout {

    public interface OnValueChangedListener {
        // TODO: Add this callback:
        // public void onValueChanged(int value, boolean selected);
        public void onValueChanged(int value);
    }

    OnValueChangedListener listener;
    Context context;
    @ColorInt int colorPressed, colorNotPressed; // Resolved colors (format 0xAARRGGBB)
    int colorPressedText, colorPressedBackground;
    int colorNotPressedText, colorNotPressedBackground;
    int pressedBackgroundResource, notPressedBackgroundResource;

    public ToggleButton(Context context) {
        super(context, null);
        this.context = context;
    }

    public ToggleButton(Context context, AttributeSet attrs) {
        super(context, attrs);
        this.context = context;
    }

    public void setOnValueChangedListener(OnValueChangedListener l) {
        this.listener = l;
    }

    public void setValue(int value) {
        if (this.listener != null) {
            listener.onValueChanged(value);
        }
    }


    /**
     * The desired color resource identifier generated by the aapt tool
     *
     * @param colorPressed    color resource ID for the pressed button(s)
     * @param colorNotPressed color resource ID for the released button(s)
     */
    public void setColorRes(@ColorRes int colorPressed, @ColorRes int colorNotPressed) {
        setColors(ContextCompat.getColor(context, colorPressed), ContextCompat.getColor(context, colorNotPressed));
    }

    /**
     * Color values are in the form 0xAARRGGBB
     *
     * @param colorPressed    resolved color for the pressed button(s)
     * @param colorNotPressed resolved color for the released button(s)
     */
    public void setColors(@ColorInt int colorPressed, @ColorInt int colorNotPressed) {
        this.colorPressed = colorPressed;
        this.colorNotPressed = colorNotPressed;
    }

    /**
     * The desired color resource identifier generated by the aapt tool
     *
     * @param colorPressedText  color resource ID for the pressed button's text
     * @param colorPressedBackground  color resource ID for the pressed button's background
     */
    public void setPressedColorsRes(@ColorRes int colorPressedText, @ColorRes int colorPressedBackground) {
        setPressedColors(ContextCompat.getColor(context, colorPressedText), ContextCompat.getColor(context, colorPressedBackground));
    }

    /**
     * Color values are in the form 0xAARRGGBB
     *
     * @param colorPressedText  resolved color for the pressed button's text
     * @param colorPressedBackground  resolved color for the pressed button's background
     */
    public void setPressedColors(@ColorInt int colorPressedText, @ColorInt int colorPressedBackground) {
        this.colorPressedText = colorPressedText;
        this.colorPressedBackground = colorPressedBackground;
    }

    /**
     * The desired color resource identifier generated by the aapt tool
     *
     * @param colorNotPressedText  color resource ID for the released button's text
     * @param colorNotPressedBackground  color resource ID for the released button's background
     */
    public void setNotPressedColorRes(@ColorRes int colorNotPressedText, @ColorRes int colorNotPressedBackground) {
        setNotPressedColors(ContextCompat.getColor(context, colorNotPressedText), ContextCompat.getColor(context, colorNotPressedBackground));
    }

    /**
     * Color values are in the form 0xAARRGGBB
     *
     * @param colorNotPressedText  resolved color for the released button's text
     * @param colorNotPressedBackground  resolved color for the released button's background
     */
    public void setNotPressedColors(int colorNotPressedText, int colorNotPressedBackground) {
        this.colorNotPressedText = colorNotPressedText;
        this.colorNotPressedBackground = colorNotPressedBackground;
    }

    /**
     * The desired color resource identifier generated by the aapt tool
     *
     * @param pressedBackgroundResource     drawable resource ID for the pressed button's background
     * @param notPressedBackgroundResource  drawable resource ID for the released button's background
     */
    public void setBackgroundResources(@DrawableRes int pressedBackgroundResource, @DrawableRes int notPressedBackgroundResource) {
        this.pressedBackgroundResource = pressedBackgroundResource;
        this.notPressedBackgroundResource = notPressedBackgroundResource;
    }

    /**
     * The desired color resource identifier generated by the aapt tool
     *
     * @param colorPressedText     drawable resource ID for the pressed button's background
     * @param colorNotPressedText  drawable resource ID for the released button's background
     */
    public void setForegroundColorsRes(@ColorRes int colorPressedText, @ColorRes int colorNotPressedText) {
        setForegroundColors(ContextCompat.getColor(context, colorPressedText), ContextCompat.getColor(context, colorNotPressedText));
    }

    /**
     * Color values are in the form 0xAARRGGBB
     *
     * @param colorNotPressedText  resolved color for the pressed button's text
     * @param colorNotPressedText  resolved color for the released button's text
     */
    public void setForegroundColors(int colorPressedText, int colorNotPressedText) {
        this.colorPressedText = colorPressedText;
        this.colorNotPressedText = colorNotPressedText;
    }
}